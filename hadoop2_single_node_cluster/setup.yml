---

- import_playbook: bootstrap.yml

- hosts: hadoop-node
  become_user: "{{ hadoop_user }}"
  tasks:

  - name: update bashrc file
    template:
      backup: yes
      src: templates/bashrc.j2
      dest: "{{ hadoop_user_bashrc  }}"
  
  - name: refresh bashrc file
    ansible.builtin.command:
      cmd: "bash -l -c 'source /home/hadoop/.bashrc'"

  - name: update hadoop-env.sh file
    template:
      backup: yes
      src: templates/hadoop-env.j2
      dest: "{{ hadoop_conf_env }}"

  - name: update core-site.xml file
    template:
      backup: yes
      src: templates/core-site.j2
      dest: "{{ hadoop_conf_core }}"

  - name: update hdfs-site.xml file
    template:
      backup: yes
      src: templates/hdfs-site.j2
      dest: "{{ hadoop_conf_hdfs }}"

  - name: update mapred-site.xml file
    template:
      backup: yes
      src: templates/mapred-site.j2
      dest: "{{ hadoop_conf_mapred }}"

  - name: update yarn-site.xml file
    template:
      backup: yes
      src: templates/yarn-site.j2
      dest: "{{ hadoop_conf_yarn }}"

  - name: create namenode
    file:
      path: "{{ hadoop_namenode }}"
      state: directory
      owner: "{{ hadoop_user }}"
      group: "{{ hadoop_group }}"
      mode: 0755

  - name: create datanode
    file:
      path: "{{ hadoop_datanode }}"
      state: directory
      owner: "{{ hadoop_user }}"
      group: "{{ hadoop_group }}"
      mode: 0755

  - name: format namenode
    shell: "{{ hadoop_bin }}/hdfs namenode -format -force"  

  
  # - name: check if namenode daemon is running
  #   ansible.builtin.shell: pgrep -fc 'org.apache.hadoop.hdfs.server.namenode.NameNode'
  #   #register: namnode_status
  #   #when: namnode_status is defined and namnode_status.stdout != "1"
  #   #changed_when: false
  #   ignore_errors: true
  #   failed_when: "'2' in stdout"
  #   notify: stop_namenode_daemon


  - name: start hdfs daemons
    ansible.builtin.shell: "{{ item }}" 
    with_items:
      - "{{ hadoop_sbin }}/hadoop-daemon.sh start namenode"
      - "{{ hadoop_sbin }}/hadoop-daemon.sh start secondarynamenode"
      - "{{ hadoop_sbin }}/hadoop-daemon.sh start datanode"
    ignore_errors: true
    failed_when: "'namenode running as process' is stdout"
    notify: stop_namenode_daemon

  - name: start yarn daemons
    ansible.builtin.shell: "{{ item }}"
    with_items:
      - "{{ hadoop_sbin }}/yarn-daemon.sh start resourcemanager"
      - "{{ hadoop_sbin }}/yarn-daemon.sh start nodemanager"
